<?php

namespace TwitterSearch\Search;
use \Mockery as m;


/**
 * Test class for Client.
 * Generated by PHPUnit on 2011-06-17 at 23:03:45.
 */
class ClientTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Client
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    public function testGetTweetsCorrectUri()
    {
        $mockHttp = m::mock('\Zend_Http_Client');

        $mockHttp->shouldReceive('setUri')
                 ->with('http://search.twitter.com/search.json?q=microsoft&page=1&rpp=100')
                 ->once();

        $mockHttp->shouldReceive('request')
                ->once();

        $mockHttpResp = m::mock("\Zend_Http_Response");
        $mockHttpResp->shouldReceive('getBody')
                     ->andReturn(Helper\TweetProvider::getFixture('ClientTest-BasicTweets'));

        $mockHttp->shouldReceive('getLastResponse')
                 ->withNoArgs()
                 ->once()
                 ->andReturn($mockHttpResp);

        $client = new Client($mockHttp);

        $tweets = $client->getTweets(array('microsoft'), 2);

    }

    public function testGetTweetsCorrectUriEncodingOneParam()
    {
        $mockHttp = m::mock('\Zend_Http_Client');

        $mockHttp->shouldReceive('setUri')
                 ->with('http://search.twitter.com/search.json?q=%3A%29&page=1&rpp=100')
                 ->between(1,1);

        $mockHttp->shouldReceive('request')
                 ->once();

        $mockHttpResp = m::mock("\Zend_Http_Response");
        $mockHttpResp->shouldReceive('getBody')
                     ->andReturn(Helper\TweetProvider::getFixture('ClientTest-BasicTweets'));

        $mockHttp->shouldReceive('getLastResponse')
                 ->withNoArgs()
                 ->once()
                 ->andReturn($mockHttpResp);

        $client = new Client($mockHttp);

        $tweets = $client->getTweets(array(':)'), 2);

    }

    public function testGetTweetsCorrectUriEncodingTwoParam()
    {
        $mockHttp = m::mock('\Zend_Http_Client');

        $mockHttp->shouldReceive('setUri')
                 ->with('http://search.twitter.com/search.json?q=microsoft+%3A%29&page=1&rpp=100')
                 ->between(1,1);

        $mockHttp->shouldReceive('request')
                 ->once();

        $mockHttpResp = m::mock("\Zend_Http_Response");
        $mockHttpResp->shouldReceive('getBody')
                     ->andReturn(Helper\TweetProvider::getFixture('ClientTest-BasicTweets'));

        $mockHttp->shouldReceive('getLastResponse')
                 ->withNoArgs()
                 ->once()
                 ->andReturn($mockHttpResp);

        $client = new Client($mockHttp);

        $tweets = $client->getTweets(array('microsoft', ':)'), 2);

    }

    public function testGetTweetsCorrectUriWithAdditionalSettings()
    {
        $mockHttp = m::mock('\Zend_Http_Client');

        $mockHttp->shouldReceive('setUri')
                 ->with('http://search.twitter.com/search.json?q=microsoft+%3A%29&page=1&rpp=100&lang=en&result_type=mixed')
                 ->between(1,1);

        $mockHttp->shouldReceive('request')
                 ->once();

        $mockHttpResp = m::mock("\Zend_Http_Response");
        $mockHttpResp->shouldReceive('getBody')
                     ->andReturn(Helper\TweetProvider::getFixture('ClientTest-BasicTweets'));

        $mockHttp->shouldReceive('getLastResponse')
                 ->withNoArgs()
                 ->once()
                 ->andReturn($mockHttpResp);

        $client = new Client($mockHttp);

        $client->setLang('en');
        $client->setResultType(Client::RESULT_TYPE_MIXED);

        $tweets = $client->getTweets(array('microsoft', ':)'), 2);
    }

    public function sampleSizeProvider()
    {
        return array(
            // Provides the desired sample number, the expected number of 
            // requests and a regex to verify urls set.
            array(1, 1, '/http:\/\/search.twitter.com\/search.json\?q=microsoft&page=[1]&rpp=100/'),
            array(101, 2, '/http:\/\/search.twitter.com\/search.json\?q=microsoft&page=[1-2]&rpp=100/'),
            array(201, 3, '/http:\/\/search.twitter.com\/search.json\?q=microsoft&page=[1-3]&rpp=100/'),
            array(1500, 15, '/http:\/\/search.twitter.com\/search.json\?q=microsoft&page=([1-9]|1[0-5])&rpp=100/')
        );
    }

    /**
     *@dataProvider sampleSizeProvider
     */
    public function testGetTweetsCorrectSampleSize($sampleSize, $requestNumber, $urlReg)
    {
        $mockHttp = m::mock('\Zend_Http_Client');

        $mockHttp->shouldReceive('setUri')                 
                 ->times($requestNumber)
                 ->with($urlReg);

        $mockHttp->shouldReceive('request')
                 ->times($requestNumber);

        $mockHttpResp = m::mock("\Zend_Http_Response");
        $mockHttpResp->shouldReceive('getBody')
                     ->andReturn(Helper\TweetProvider::getFixture('ClientTest-BasicTweets'));

        $mockHttp->shouldReceive('getLastResponse')
                 ->withNoArgs()
                 ->times($requestNumber)
                 ->andReturn($mockHttpResp);

        $client = new Client($mockHttp);

        $tweets = $client->getTweets(array('microsoft'), $sampleSize);

        $tCount = count($tweets);

        $this->assertEquals($sampleSize, $tCount);
    }

    public function testGetTweetsReturnsCorrectArrayStructure(){
        
        
        $mockHttp = m::mock('\Zend_Http_Client');

        $mockHttp->shouldReceive('setUri')
                 ->with('http://search.twitter.com/search.json?q=microsoft&page=1&rpp=100')
                 ->once();

        $mockHttp->shouldReceive('request')
                ->once();

        $mockHttpResp = m::mock("\Zend_Http_Response");
        $mockHttpResp->shouldReceive('getBody')
                     ->andReturn(Helper\TweetProvider::getFixture('ClientTest-BasicTweets'));

        $mockHttp->shouldReceive('getLastResponse')
                 ->withNoArgs()
                 ->once()
                 ->andReturn($mockHttpResp);

        $client = new Client($mockHttp);

        $tweets = $client->getTweets(array('microsoft'), 1);

        $tweet = array_shift($tweets);

        $expectedKeys = array('username', 'tweetText', 'date');
        $tweetKeys = array_keys($tweet);

        $this->assertEquals($expectedKeys, $tweetKeys);
    }

}

?>
