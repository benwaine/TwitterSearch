<?php

namespace TwitterSearch\Search;
use \Mockery as m;


/**
 * Test class for Client.
 * Generated by PHPUnit on 2011-06-17 at 23:03:45.
 */
class ClientTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Client
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    public function testGetTweetsCorrectUri()
    {
        $mockHttp = m::mock('\Zend_Http_Client');

        $mockHttp->shouldReceive('setUri')
                 ->with('http://search.twitter.com/search.json?q=microsoft')
                 ->once();

        $mockHttp->shouldReceive('request')
                ->once();

        $client = new Client($mockHttp);

        $tweets = $client->getTweets(array('microsoft'), 2);

    }

    public function testGetTweetsCorrectUriEncodingOneParam()
    {
        $mockHttp = m::mock('\Zend_Http_Client');

        $mockHttp->shouldReceive('setUri')
                 ->with('http://search.twitter.com/search.json?q=%3A%29')
                 ->between(1,1);

        $mockHttp->shouldReceive('request')
                 ->once();

        $client = new Client($mockHttp);

        $tweets = $client->getTweets(array(':)'), 2);

    }

    public function testGetTweetsCorrectUriEncodingTwoParam()
    {
        $mockHttp = m::mock('\Zend_Http_Client');

        $mockHttp->shouldReceive('setUri')
                 ->with('http://search.twitter.com/search.json?q=microsoft+%3A%29')
                 ->between(1,1);

        $mockHttp->shouldReceive('request')
                 ->once();

        $client = new Client($mockHttp);

        $tweets = $client->getTweets(array('microsoft', ':)'), 2);

    }

    public function testGetTweetsCorrectUriWithAdditionalSettings()
    {
        $mockHttp = m::mock('\Zend_Http_Client');

        $mockHttp->shouldReceive('setUri')
                 ->with('http://search.twitter.com/search.json?q=microsoft+%3A%29&lang=en&result_type=mixed')
                 ->between(1,1);

        $mockHttp->shouldReceive('request')
                 ->once();

        $client = new Client($mockHttp);

        $client->setLang('en');
        $client->setResultType(Client::RESULT_TYPE_MIXED);

        $tweets = $client->getTweets(array('microsoft', ':)'), 2);
    }

}

?>
